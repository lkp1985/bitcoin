/*
 * Copyright 2012 Google Inc.
 * Copyright 2014 Andreas Schildbach
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.lkp.schedule;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import org.bitcoinj.core.Block;
import org.bitcoinj.core.BlockChain;
import org.bitcoinj.core.NetworkParameters;
import org.bitcoinj.core.Peer;
import org.bitcoinj.core.PeerAddress;
import org.bitcoinj.core.PeerGroup;
import org.bitcoinj.core.Sha256Hash;
import org.bitcoinj.core.Transaction;
import org.bitcoinj.core.TransactionInput;
import org.bitcoinj.core.TransactionOutput;
import org.bitcoinj.net.discovery.DnsDiscovery;
import org.bitcoinj.params.MainNetParams;
import org.bitcoinj.store.BlockStore;
import org.bitcoinj.store.BlockStoreException;
import org.bitcoinj.store.MemoryBlockStore;
import org.bitcoinj.utils.BriefLogFormatter;
import org.springframework.stereotype.Component;

import joptsimple.OptionException;
import joptsimple.OptionParser;
import joptsimple.OptionSet;

/**
 * <p>Downloads the block given a block hash from the remote or localhost node and prints it out.</p>
 * <p>When downloading from localhost, run bitcoind locally: bitcoind -testnet -daemon.
 * After bitcoind is up and running, use command: org.bitcoinj.examples.FetchBlock --localhost &lt;blockHash&gt; </p>
 * <p>Otherwise, use command: org.bitcoinj.examples.FetchBlock &lt;blockHash&gt;, this command will download blocks from a peer generated by DNS seeds.</p>
 */
//@Component
public class FetchBlock {
	
	List<Peer> peerList = new ArrayList<Peer>();
	
	public FetchBlock() throws BlockStoreException, UnknownHostException, InterruptedException, ExecutionException{
		BriefLogFormatter.init();
		final NetworkParameters params = MainNetParams.get();
		//TestNet3Params.get();
		BlockStore blockStore = new MemoryBlockStore(params);
		BlockChain chain = new BlockChain(params, blockStore);
		for(int i=0;i<1; i++){
	        // Parse command line arguments
//	        OptionParser parser = new OptionParser();
//	        OptionSet opts = null;
	         
	        PeerGroup peerGroup ;
	        // Connect to testnet and find a peer
	        System.out.println("Connecting to node");
	        peerGroup = new PeerGroup(params, chain);
	        peerGroup.addPeerDiscovery(new DnsDiscovery(params));
	        peerGroup.start();
	        peerGroup.waitForPeers(1).get();
	        peerList.add(peerGroup.getConnectedPeers().get(0));
		}
		System.out.println("peerlist.size="+peerList.size());
        
	}
	public   Block getBlock(String blockhash) throws InterruptedException, ExecutionException{
		Random r = new Random();
		int index = r.nextInt(peerList.size());
		System.out.println("index="+index);
 	//System.out.println("int peer size="+peerGroup.numConnectedPeers()+",index="+index);
	//	peerGroup.getConnectedPeers().get(0);
        Peer peer = peerList.get(index);
        
		Sha256Hash blockHash = Sha256Hash.wrap(blockhash);
        // Retrieve a block through a peer
        Future<Block> future = peer.getBlock(blockHash);
       // System.out.println("Waiting for node to send us the requested block: " + blockhash);
        Block block = future.get(); 
        System.out.println("Peer :"+peer.hashCode()+" get block"+block.getHashAsString());
        return block;
	}
    public static void main(String[] args) throws Exception {
    	 
        BriefLogFormatter.init();
        // Parse command line arguments
        OptionParser parser = new OptionParser();
        OptionSet opts = null;
        List<String> nonOpts = null;
        try {
            parser.accepts("localhost", "Connect to the localhost node");
            parser.accepts("help", "Displays program options");
            opts = parser.parse(args);
            if (opts.has("help")) {
                System.out.println("usage: org.bitcoinj.examples.FetchBlock [--localhost] <blockHash>");
                parser.printHelpOn(System.out);
                return;
            }
            nonOpts = opts.nonOptionArguments();
            nonOpts = new ArrayList<String>();
            nonOpts.add("000000000000000004ec466ce4732fe6f1ed1cddc2ed4b328fff5224276e3f6f");
            if (nonOpts.size() != 1) {
                throw new IllegalArgumentException("Incorrect number of block hash, please provide only one block hash.");
            }
        } catch (OptionException | IllegalArgumentException e) {
            System.err.println(e.getMessage());
            System.err.println("usage: org.bitcoinj.examples.FetchBlock [--localhost] <blockHash>");
            parser.printHelpOn(System.err);
            return;
        }

        // Connect to testnet and find a peer
        System.out.println("Connecting to node");
        final NetworkParameters params = MainNetParams.get();
        		//TestNet3Params.get();
        BlockStore blockStore = new MemoryBlockStore(params);
        BlockChain chain = new BlockChain(params, blockStore);
        PeerGroup peerGroup = new PeerGroup(params, chain);
        if (!opts.has("localhost")) {
            peerGroup.addPeerDiscovery(new DnsDiscovery(params));
        } else {
            PeerAddress addr = new PeerAddress(params, InetAddress.getLocalHost());
            peerGroup.addAddress(addr);
        }
        peerGroup.start();
        peerGroup.waitForPeers(10).get();
        System.out.println("peerGroup.getConnectedPeers().size()="+peerGroup.getConnectedPeers().size());
        Peer peer = peerGroup.getConnectedPeers().get(0);

        // Retrieve a block through a peer
        Sha256Hash blockHash = Sha256Hash.wrap(nonOpts.get(0));
        while(blockHash!=null){
        	Future<Block> future = peer.getBlock(blockHash);
            System.out.println("Waiting for node to send us the requested block: " + blockHash);
            Block block = future.get();
            System.out.println("get block :"+blockHash+" success");
            blockHash = block.getPrevBlockHash();
          //  anaylse(block);
        }
        
        peerGroup.stopAsync();
    }
    
    public static  void anaylse(Block block){
    	List<Transaction> txList = block.getTransactions();
        for(Transaction trac: txList){
        	System.out.println("trac="+trac.getHashAsString());
        	List<TransactionOutput>  outList = trac.getOutputs();
        	for(TransactionOutput out : outList){
        		System.out.println("value="+out.getValue().value+",address="+out.getScriptPubKey().isSentToAddress());
        		
        	}
        	List<TransactionInput>  inList = trac.getInputs();
        	for(TransactionInput input : inList){
        		System.out.println("input="+input);
        	}
        }
        System.out.println("this block="+block);
    }
}
